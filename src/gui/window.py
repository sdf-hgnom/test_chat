# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'src/ChatWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineOnlyReceiver

from PyQt5.QtGui import QIcon
from PyQt5.QtNetwork import QTcpSocket

from src.settings import get_init_states, save_init_states
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QPlainTextEdit, QLineEdit, QGroupBox, \
    QMessageBox, QWidget, QToolBox, QAction, QDialog, QFormLayout, QHBoxLayout, QDialogButtonBox
from PyQt5.QtCore import Qt, QRect, QObject


class ConnectorProtocol(LineOnlyReceiver):
    factory: "Connector"

    def connectionMade(self):
        self.factory.window.protocol = self
        pass

    def lineReceived(self, line):
        message = line.decode(encoding='utf-8')
        pass


class Connector(ClientFactory):
    window: 'Window'
    protocol: ConnectorProtocol
    pass


class Icons(QObject):
    icon_send: QIcon = None
    icon_exit: QIcon = None
    icon_setup: QIcon = None

    def __init__(self):
        super(Icons, self).__init__()
        self.icon_send = QIcon('images/document-send.png')
        self.icon_exit = QIcon('images/application-exit.png')
        self.icon_setup = QIcon('images/system-run.png')

class Test(QDialog):
    def __init__(self):
        super().__init__()
        self.setup_ui()

    def setup_ui(self):
        okButton = QPushButton("OK")
        cancelButton = QPushButton("Cancel")

        hbox = QHBoxLayout(self)
        hbox.addStretch(1)
        hbox.addWidget(okButton)
        hbox.addWidget(cancelButton)

        vbox = QVBoxLayout(self)
        vbox.addStretch(1)
        vbox.addLayout(hbox)

        self.setLayout(vbox)


        self.setGeometry(300, 300, 300, 150)
        self.setWindowTitle('Buttons')



        self.setLayout(vbox)
        self.setGeometry(300, 300, 300, 150)



class EditSettings(QDialog):
    edit_host: QLineEdit
    edit_user: QLineEdit
    edit_port: QLineEdit
    form: QFormLayout
    data: dict
    ok_button: QPushButton
    cancel_button: QPushButton
    group_box: QGroupBox

    def __init__(self,what_edit: dict):
        super().__init__()
        self.form = QFormLayout()
        self.edit_host = QLineEdit()
        self.edit_user = QLineEdit()
        self.edit_port = QLineEdit()
        self.form = QFormLayout()
        # self.ok_button = None
        # self.cancel_button = None
        self.data = what_edit
        self.icon_send = QIcon('images/document-send.png')
        self.icon_exit = QIcon('images/application-exit.png')
        self.icon_setup = QIcon('images/system-run.png')
        self.setup_ui()

    def setup_ui(self):
        self.setWindowTitle('Параметры')
        self.setWindowIcon(self.icon_setup)
        self.setModal(True)
        self.group_box = QGroupBox('Form')
        buttonbox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttonbox.accepted.connect(self.accept)
        buttonbox.rejected.connect(self.reject)

        if 'User' in self.data and  self.data['User'] and self.data['User'] != ' ':
            self.edit_user.setText(self.data['User'])
        if self.data['tcp_port'] and self.data['tcp_port'] != ' ':
            self.edit_port.setText(str(self.data['tcp_port']))
        if self.data['connect_to'] and self.data['connect_to'] != ' ':
            self.edit_host.setText(self.data['connect_to'])

        self.edit_user.setParent(self.group_box)
        self.edit_port.setParent(self.group_box)
        self.edit_host.setParent(self.group_box)

        self.form.addRow("&User:", self.edit_user)
        self.form.addRow("&Host:", self.edit_host)
        self.form.addRow("&Port:", self.edit_port)
        self.group_box.setLayout(self.form)
        # self.form.addRow(self.ok_button)
        # self.form.addRow(self.cancel_button)
        main_layout = QVBoxLayout(self)
        main_layout.addWidget(self.group_box)
        main_layout.addWidget(buttonbox)
        self.setLayout(main_layout)
        # self.resize(200,200)

    def get_data(self):
        return self.data

    def accept(self) -> None:
        self.save_editors()
        super().accept()


    def save_editors(self) -> None:
        user = self.edit_user.text()
        if user and user != ' ':
            self.data['User'] = user
        port = self.edit_port.text()
        if port.isdigit():
            port = int(port)
            self.data['tcp_port'] = port
        host = self.edit_host.text()
        if host and host != ' ':
            self.data['connect_to'] = host




class Window(QMainWindow):
    def __init__(self):
        super().__init__()
        self._socket: QTcpSocket = QTcpSocket()
        self.toolbox: QToolBox = None
        self.centralwidget: QWidget = None
        self.exit_button: QPushButton = None
        self.send_button: QPushButton = None
        self.plainTextEdit: QPlainTextEdit = None
        self.verticalLayout: QVBoxLayout = None
        self.line_edit: QLineEdit = None
        self.init_state = get_init_states()
        self.icon_send = QIcon('images/document-send.png')
        self.icon_exit = QIcon('images/application-exit.png')
        self.icon_setup = QIcon('images/system-run.png')
        self.setup_ui()

    def send_message_to_server(self,message):
        data = message.encode(encoding='utf-8')
        self._socket.write(data)


    def on_connect(self):
        message = f"user: {self.init_state['User']} \n"
        self.send_message_to_server(message=message)

    def on_ready_read(self):
        data: str = self._socket.readLine(maxlen=255)
        if data:
            message = data.decode(encoding='utf-8')
            self.plainTextEdit.appendPlainText(message)

    def socket_connect(self):
        self._socket.connectToHost(self.init_state['connect_to'],self.init_state['tcp_port'])
        self._socket.readyRead.connect(self.on_ready_read)
        self._socket.connected.connect(self.on_connect)

    def save_state(self):
        position = self.frameGeometry()
        geometry = [position.x(), position.y(), position.height(), position.width()]
        self.init_state['client_window'] = geometry
        save_init_states()

    def closeEvent(self, event: QtGui.QCloseEvent) -> None:
        reply = QMessageBox.question(self, 'Message', "Are you sure to quit?", QMessageBox.Yes | QMessageBox.No,
                                     QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.save_state()
            event.accept()
        else:
            event.ignore()

    def send_message(self):
        message = self.line_edit.text()
        if message and message != ' ':
            self.plainTextEdit.appendPlainText(message)
            self.line_edit.clear()
            self.line_edit.setFocus()
            self.send_message_to_server(message=message)

    def edit_settings(self):
        dialog = EditSettings( what_edit=self.init_state)
        res= dialog.exec_()
        if res:
            self.init_state = dialog.get_data()
        dialog.destroy()
        self.line_edit.setFocus()



    def setup_ui(self):
        geometry = self.init_state['client_window']
        qr_geometry = QRect()
        qr_geometry.setX(geometry[0])
        qr_geometry.setY(geometry[1])
        qr_geometry.setHeight(geometry[3])
        qr_geometry.setWidth(geometry[2])
        self.centralwidget = QtWidgets.QWidget(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName('centralwidget')
        self.send_button = QPushButton('Послать', self.centralwidget)
        self.send_button.setIcon(self.icon_send)
        self.exit_button = QPushButton('&Выход', self.centralwidget)
        self.exit_button.setIcon(self.icon_exit)
        self.plainTextEdit = QPlainTextEdit(self.centralwidget)
        self.line_edit = QLineEdit(self.centralwidget)

        self.verticalLayout = QVBoxLayout(self)

        self.setObjectName("MainWindow")
        self.send_button.setObjectName('send_button')
        self.exit_button.setObjectName('exit_button')
        self.verticalLayout.setObjectName("verticalLayout")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.line_edit.setObjectName("lineEdit")
        self.plainTextEdit.setToolTip("Все сообщения")
        self.line_edit.setToolTip("Введите сообщение ")
        self.send_button.setToolTip("Послать сообщение")
        self.exit_button.setToolTip("Выход")
        self.plainTextEdit.setReadOnly(True)

        self.verticalLayout.addWidget(self.plainTextEdit)
        self.verticalLayout.addWidget(self.line_edit)
        self.verticalLayout.addWidget(self.send_button)
        self.verticalLayout.addWidget(self.exit_button)
        self.centralwidget.setLayout(self.verticalLayout)
        self.setCentralWidget(self.centralwidget)
        self.setGeometry(qr_geometry)
        self.setWindowTitle('Тестовый Чат')
        self.setWindowIcon(self.icon_send)
        self.toolbox = QToolBox(self)
        exit_action = QAction(self.icon_exit, '&Exit', self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.setStatusTip('Exit Application')
        exit_action.triggered.connect(self.close)
        setup_action = QAction(self.icon_setup, '&Setup', self)
        setup_action.setShortcut('Ctrl+S')
        setup_action.setStatusTip('Edit Settings')
        setup_action.triggered.connect(self.edit_settings)

        menubar = self.menuBar()
        file_menu = menubar.addMenu('&File')
        file_menu.addAction(exit_action)
        file_menu.addAction(setup_action)
        self.send_button.clicked.connect(self.send_message)
        self.exit_button.clicked.connect(self.close)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
