# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'src/ChatWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5.QtGui import QIcon

from src.settings import get_init_states,save_init_states
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QPlainTextEdit, QLineEdit, QGroupBox, \
    QMessageBox, QWidget, QToolBox, QAction
from PyQt5.QtCore import Qt, QRect


class Window(QMainWindow):
    def __init__(self):
        super().__init__()
        self.icon_send = QIcon('images/document-send.png')
        self.icon_exit = QIcon('images/application-exit.png')
        self.icon_setup = QIcon('images/system-run.png')
        self.toolbox:QToolBox = None
        self.centralwidget: QWidget = None
        self.exit_button: QPushButton = None
        self.send_button: QPushButton = None
        self.plainTextEdit: QPlainTextEdit = None
        self.verticalLayout: QVBoxLayout = None
        self.line_edit: QLineEdit = None
        self.init_state = get_init_states()
        print(self.init_state)
        self.setup_ui()

    def save_state(self):
        position = self.frameGeometry()
        geometry = [position.x(),position.y(),position.height(),position.width()]
        self.init_state['client_window'] = geometry
        save_init_states()

    def closeEvent(self, event: QtGui.QCloseEvent) -> None:
        reply = QMessageBox.question(self, 'Message', "Are you sure to quit?", QMessageBox.Yes | QMessageBox.No,
                                     QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.save_state()
            event.accept()
        else:
            event.ignore()

    def send_message(self):
        message = self.line_edit.text()
        if message and message != ' ':
            self.plainTextEdit.appendPlainText(message)
            self.line_edit.clear()

    def edit_settings(self):
        pass

    def setup_ui(self):
        geometry = self.init_state['client_window']
        qr_geometry = QRect()
        qr_geometry.setX(geometry[0])
        qr_geometry.setY(geometry[1])
        qr_geometry.setHeight(geometry[3])
        qr_geometry.setWidth(geometry[2])
        self.centralwidget = QtWidgets.QWidget(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName('centralwidget')
        self.send_button = QPushButton('Послать', self.centralwidget)
        self.send_button.setIcon(self.icon_send)
        self.exit_button = QPushButton('&Выход', self.centralwidget)
        self.exit_button.setIcon(self.icon_exit)
        self.plainTextEdit = QPlainTextEdit(self.centralwidget)
        self.line_edit = QLineEdit(self.centralwidget)


        self.verticalLayout = QVBoxLayout(self)

        self.setObjectName("MainWindow")
        self.send_button.setObjectName('send_button')
        self.exit_button.setObjectName('exit_button')
        self.verticalLayout.setObjectName("verticalLayout")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.line_edit.setObjectName("lineEdit")
        self.plainTextEdit.setToolTip("Все сообщения")
        self.line_edit.setToolTip("Введите сообщение ")
        self.send_button.setToolTip("Послать сообщение")
        self.exit_button.setToolTip("Выход")
        self.plainTextEdit.setReadOnly(True)

        self.verticalLayout.addWidget(self.plainTextEdit)
        self.verticalLayout.addWidget(self.line_edit)
        self.verticalLayout.addWidget(self.send_button)
        self.verticalLayout.addWidget(self.exit_button)
        self.centralwidget.setLayout(self.verticalLayout)
        self.setCentralWidget(self.centralwidget)
        self.setGeometry(qr_geometry)
        self.setWindowTitle('Тестовый Чат')
        self.setWindowIcon(self.icon_send)
        self.toolbox = QToolBox(self)
        exit_action = QAction(self.icon_exit,'&Exit',self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.setStatusTip('Exit Application')
        exit_action.triggered.connect(self.close)
        setup_action = QAction(self.icon_setup, '&Setup', self)
        setup_action.setShortcut('Ctrl+S')
        setup_action.setStatusTip('Edit Settings')
        setup_action.triggered.connect(self.edit_settings)

        menubar = self.menuBar()
        file_menu = menubar.addMenu('&File')
        file_menu.addAction(exit_action)
        file_menu.addAction(setup_action)
        self.send_button.clicked.connect(self.send_message)
        self.exit_button.clicked.connect(self.close)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
